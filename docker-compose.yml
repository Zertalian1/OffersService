version: "3.7"


services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_DB: myDb
      POSTGRES_USER: Zertallian
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    restart: always

  generating-offers:
    build:
      dockerfile: generatingOffers/Dockerfile
    container_name: generating-offers
    ports:
      - "8080:8080"
    depends_on:
      - postgresql

  show-offer:
    build:
      dockerfile: showingOffers/Dockerfile
    container_name: show-offers
    ports:
      - "8081:8081"
    #depends_on:
    #  generating-offers:
    #    condition: service_healthy